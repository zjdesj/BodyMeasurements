print(rmse(yhat22, y22))
yhat23= c(1.124, 1.082, 1.133)
y23 = c(1.110, 1.095, 1.134)
print(mae(yhat23, y23))
print(rmse(yhat23, y23))
yhat24= c(1.186, 1.239, 1.169)
y24 = c(1.175, 1.237, 1.166)
print(mae(yhat24, y24))
print(rmse(yhat24, y24))
yhat25= c(1.387, 1.410, 1.615)
y25 = c(1.355, 1.414, 1.612)
print(mae(yhat25, y25))
print(rmse(yhat25, y25))
arr = c(18,
7,
4,
3,
1,
2,
10,
9,
5,
2,
2,
3,
2,
1,
9,
4,
7,
4,
1,
9,
20)
arr / 37
(arr / 37) * 100
round((arr / 37) * 100, 2)
print(round((arr / 37) * 100, 2))
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(relation)
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
SD(x)
SD(standingSeconds_X)
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
# 生成 png 图片
png(file = "comparison_standing.png")
# 生成图表
plot(y,x,col = "blue",main = "standing time regression",
abline(lm(x~y)), xlab = "counts",ylab = "ground truth")
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
# 生成 png 图片
png(file = "comparison_standing.png")
# 生成图表
plot(standingSeconds_Y,standingSeconds_X,col = "blue",main = "standing time regression",
abline(lm(standingSeconds_Y ~ standingSeconds_X)), xlab = "counts",ylab = "ground truth")
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
# 生成 png 图片
png(file = "comparison_standing.png")
# 生成图表
plot(standingSeconds_Y,standingSeconds_X,col = "blue",main = "standing time regression",
abline(lm(standingSeconds_Y ~ standingSeconds_X)), xlab = "counts",ylab = "ground truth")
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
# 生成 png 图片
png(file = "comparison_standing.png")
# 生成图表
plot(standingSeconds_Y,standingSeconds_X,col = "blue",main = "standing time regression",
abline(lm(standingSeconds_X ~ standingSeconds_Y)), xlab = "counts",ylab = "ground truth")
standingSeconds_X = c(13016, 14850, 19407, 19152, 18489, 13761, 13731, 22660, 21066, 24332)
standingSeconds_Y = c(13036, 14884, 20019, 19311, 18445, 11304, 13674, 19469, 21163, 24290)
relation = lm(standingSeconds_Y ~ standingSeconds_X)
print(summary(relation))
# 生成 png 图片
png(file = "comparison_standing.png")
# 生成图表
plot(standingSeconds_Y,standingSeconds_X,col = "blue",main = "standing time regression",
abline(lm(standingSeconds_X ~ standingSeconds_Y)), cex = 16,pch = 16, xlab = "counts",ylab = "ground truth")
# 样本数据
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# 生成 png 图片
png(file = "linearregression.png")
# 生成图表
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
source("~/.active-rstudio-document")
# 样本数据
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# 生成 png 图片
png(file = "linearregression.png")
# 生成图表
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# 生成图表
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# 样本数据
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# 生成 png 图片
png(file = "linearregression.png")
# 生成图表
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
install.packages('liDR', 'raster','sp', 'rgl')
install.packages('liDR', 'raster','sp', 'rgl')
library(rastre)
library(sp)
library(rql)
library(liDR)
library(rastre)
library(sp)
library(rql)
library(liDR)
library(rastre)
library(sp)
library(rgl)
install.packages('liDR', 'raster','sp', 'rgl')
library(rastre)
library(sp)
library(rgl)
install.packages('liDR', 'raster','sp', 'rgl')
version
install.packages("lidR")
install.packages("raster")
install.packages("sp")
install.packages("rgl")
library(liDR)
library(rastre)
library(sp)
library(rgl)
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
print(cv_results)
cv_results$results
cv_results$modelInfo
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
# Fit a linear regression model using the entire dataset with optimal hyperparameters
final_model <- train(
formula,
data = data,  # Your entire dataset
method = "lm",
trControl = trainControl(method = "none"),  # Disable cross-validation
# Include any other relevant hyperparameters based on your cross-validation results
)
final_model
summary(final_model)
response_variable <- "HH"
data = data[, c('WH', 'HH')]
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
# Fit a linear regression model using the entire dataset with optimal hyperparameters
final_model <- train(
formula,
data = data,  # Your entire dataset
method = "lm",
trControl = trainControl(method = "none"),  # Disable cross-validation
# Include any other relevant hyperparameters based on your cross-validation results
)
summary(final_model)
final_model
summary(final_model)
cv_results$finalModel
data[97]
data[97,]
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
data[97,]
data = data[1:96, c('WH', 'HH')]
summary(data)
data
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
cv_results$finalModel
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
data = data[, c('WH', 'HH')]
#day data
#data = data[1:96, c('WH', 'HH')]
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
cv_results$finalModel
#Coefficients:
#  (Intercept)           WH
#0.01672      0.96105
d
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
data = data[, c('WH', 'HH')]
#day data
#data = data[1:96, c('WH', 'HH')]
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
cv_results$finalModel
#Coefficients:
#  (Intercept)           WH
#0.01672      0.96105
test <- read_excel('WH_HH_7&9.xlsx')
test
lm = cv_results$finalModel
lm
test$predicted_HH <- predict(lm, newdata = test)
test
mae_HH <- mean(abs(test$HH - test$predicted_HH))
mae_HH
rmse_HH = sqrt(mean((test$HH - test$predicted_HH)^2))
rmse_HH
r_squared_HH <- 1 - sum((test$HH - test$predicted_HH)^2) / sum((test$HH - mean(test$HH))^2)
r_squared_HH
# Test on data 7&9, 30&50
test <- read_excel('WH_HH_7&9.xlsx')
test
test$predicted_HH <- predict(lm, newdata = test)
test
mae_HH <- mean(abs(test$HH - test$predicted_HH))
rmse_HH = sqrt(mean((test$HH - test$predicted_HH)^2))
r_squared_HH <- 1 - sum((test$HH - test$predicted_HH)^2) / sum((test$HH - mean(test$HH))^2)
mae_HH
rmse_HH
r_squared_HH
# Test on data 7&9, 30&50
test <- read_excel('WH_HH_7&9.xlsx')
#test
test$predicted_HH <- predict(lm, newdata = test)
test
mae_HH <- mean(abs(test$HH - test$predicted_HH))
rmse_HH = sqrt(mean((test$HH - test$predicted_HH)^2))
r_squared_HH <- 1 - sum((test$HH - test$predicted_HH)^2) / sum((test$HH - mean(test$HH))^2)
mae_HH
rmse_HH
r_squared_HH
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
#data = data[, c('WH', 'HH')]
#day data
data = data[1:96, c('WH', 'HH')]
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
lm = cv_results$finalModel
#Coefficients:
#  (Intercept)           WH
#0.01672      0.96105
# Test on data 7&9, 30&50
test <- read_excel('WH_HH_7&9.xlsx')
#test
test$predicted_HH <- predict(lm, newdata = test)
test
mae_HH <- mean(abs(test$HH - test$predicted_HH))
rmse_HH = sqrt(mean((test$HH - test$predicted_HH)^2))
r_squared_HH <- 1 - sum((test$HH - test$predicted_HH)^2) / sum((test$HH - mean(test$HH))^2)
mae_HH
rmse_HH
r_squared_HH
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
library(caret)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
data <- read_excel('WH_HH.xlsx')
data = data[, c('WH', 'HH')]
#day data
#data = data[1:96, c('WH', 'HH')]
summary(data)
response_variable <- "HH"
# Define the formula for the model
formula <- as.formula(paste(response_variable, "~ ."))
# Fit a linear regression model using 10-fold cross-validation
cv_results <- train(
formula,
data = data,
method = "lm",
trControl = trainControl(method = "cv", number = 10)
)
cv_results
lm = cv_results$finalModel
#Coefficients:
#  (Intercept)           WH
#0.01672      0.96105
# Test on data 7&9, 30&50
test <- read_excel('WH_HH_7&9.xlsx')
#test
test$predicted_HH <- predict(lm, newdata = test)
test
mae_HH <- mean(abs(test$HH - test$predicted_HH))
rmse_HH = sqrt(mean((test$HH - test$predicted_HH)^2))
r_squared_HH <- 1 - sum((test$HH - test$predicted_HH)^2) / sum((test$HH - mean(test$HH))^2)
mae_HH
rmse_HH
r_squared_HH
# for ground data summary (table)
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(writexl)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/")
data <- read_excel('data-measurement.xlsx')
data$height = factor(data$height, levels=c('8', '10', '15', '30', '50', 'n8', 'n10', 'n15'))
data$ground <- as.numeric(data$ground)
summary(data)
summary_data_factors <- data %>%
group_by(height) %>%
summarise(
mean_ground = mean(AW1, na.rm = TRUE),
sd_ground = sd(AW1, na.rm = TRUE),
)
summary_data_factors <- data %>%
group_by(height) %>%
summarise(
mean_ground = mean(ground, na.rm = TRUE),
sd_ground = sd(ground, na.rm = TRUE),
)
summary_data_factors
# for ground data summary (table)
library(readxl)
library(dplyr)
library(ggplot2)
library(patchwork)
library(writexl)
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/")
data <- read_excel('data-measurement.xlsx')
data$height = factor(data$height, levels=c('8', '10', '15', '30', '50', 'n8', 'n10', 'n15'))
data$speed = factor(data$speed, levels = c('1', '2', '3', '5', '7', '9'),
labels = c('1 m/s', '2 m/s', '3 m/s', '5 m/s', '7 m/s', '9 m/s'))
data$ground <- as.numeric(data$ground)
summary(data)
summary_data_factors <- data %>%
group_by(height, speed) %>%
summarise(
mean_ground = mean(ground, na.rm = TRUE),
sd_ground = sd(ground, na.rm = TRUE),
)
summary_data_factors
write_xlsx(summary_data_factors, '/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/results-ground.xlsx')
test <- read_excel('WH_HH_7&9.xlsx')
setwd("/Users/wyw/Documents/Chaper2/github-code/segmentation-3D/data-result/estimation")
test <- read_excel('WH_HH_7&9.xlsx')
#test
test
# Load the magick package
library(magick)
# Read the input image
input_image <- image_read("/Users/wyw/Documents/wsr.jpg")  # Replace with your image file path
# Calculate coordinates to crop the center
original_width <- image_info(input_image)$width
original_height <- image_info(input_image)$height
new_width <- 595
new_height <- 794
left <- (original_width - new_width) / 2
top <- (original_height - new_height) / 2
# Crop the center portion of the image
cropped_image <- image_crop(input_image, geometry = geometry_area(left, top, new_width, new_height))
resized_image
input_image <- image_read("/Users/wyw/Documents/wsr.jpg")
# Calculate coordinates to crop the center
original_width <- image_info(input_image)$width
original_height <- image_info(input_image)$height
new_width <- 595
new_height <- 794
left <- (original_width - new_width) / 2
top <- (original_height - new_height) / 2
# Crop the center portion of the image
cropped_image <- image_crop(input_image, geometry = geometry_area(left, top, new_width, new_height))
cropped_image
input_image
cropped_image <- image_crop(input_image, geometry = paste(new_width, new_height, sep = "x"), x = left, y = top)
geometry <- paste(new_width, new_height, sep = "x")
cropped_image <- image_crop(input_image, geometry = geometry)
cropped_image
resized_image <- image_resize(cropped_image, "236x315!")
# Save the resized image
image_write(resized_image, path = "/Users/wyw/Documents/wsr_crop.jpgg")
image_write(resized_image, path = "/Users/wyw/Documents/wsr_crop.jpg")
# Resize the cropped image to 595x794 pixels
resized_image <- image_resize(cropped_image, "236x315!", density = "150x150")
resized_image <- image_resize(cropped_image, geometry = "236x315", density = "150x150")
image_write(cropped_image, path = "/Users/wyw/Documents/wsr_crop1.jpg")
